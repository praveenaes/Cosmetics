<%- include("../../views/partials/user/header") %>

<style>
  .order-summary {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  .order-summary img {
    width: 50px;
    height: 50px;
  }
  .order-summary .product-name {
    font-size: 14px;
  }
  .order-summary .product-mn {
    font-size: 12px;
    color: gray;
  }
  .order-summary .product-price {
    color: blue;
    font-weight: bold;
  }
  .order-summary .total-price {
    color: blue;
    font-weight: bold;
  }
  .order-summary .apply-btn {
    background-color: #ffc107;
    color: white;
  }
  .order-summary .place-order-btn {
    background-color: #ffc107;
    color: white;
  }

  .address-cards .card {
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .address-cards .card:hover {
    border-color: #007bff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .address-cards .form-check {
    padding-left: 0;
  }

  .address-cards .form-check-input {
    position: absolute;
    right: 15px;
    top: 15px;
  }

  .address-cards .form-check-label {
    display: block;
    width: 100%;
    cursor: pointer;
  }

  .address-cards .card.selected {
    border-color: #484ac5;
    background-color: #f8f9ff;
  }
  .yellow-button {
  background-color: rgb(240, 223, 34); /* Yellow background */
  color: rgb(252, 251, 251); /* Black text color */
  padding: 5px 15px; /* Padding for button-like appearance */
  font-size: 18px; /* Keep the font size as 18px */
  border-radius: 10px; /* Rounded corners */
  border: none; /* Remove border */
  display: inline-block; /* To behave like a button */
  text-align: center; /* Center the text */
  font-weight: 100;
}

</style>

<body class="bg-light">
  <div class="container py-5" style="margin-top: 70px;" >
    <div class="row">
      <!-- Billing Address -->
      <!-- Billing Address -->
      <div class="col-lg-8 mb-4">
        <div class="bg-white p-4 rounded shadow-sm">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h4 mb-0">Shipping Address</h2>
            <a href="/userAddress" class="btn btn-primary"
              >Add New Address</a
            >
          </div>

          <!-- Address Selection Area -->
<div class="address-cards">
  <% if (userAddress && userAddress.address.length > 0) { %>
  <div class="row">
    <% userAddress.address.forEach((address, index) => { %>
    <div class="col-md-6 mb-3">
      <div class="card h-100">
        <div class="card-body">
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              name="selectedAddress"
              id="address_<%= address._id %>"
              value="<%= address._id %>"
              <%= index === 0 ? 'checked' : '' %>> <!-- Select the first address by default -->
           
            <label class="form-check-label" for="address_<%= address._id %>">
<span class="badge yellow-button mb-2"><%= address.addressType %></span>
              <h6 class="mb-1"><%= address.name %></h6>
              <p class="mb-1 text-muted small" style="font-size: 18px;" >
                <%= address.streetAddress %><br />
                <%= address.city %>, <%= address.state %><br />
                <%= address.country %><br />
                Phone: <%= address.phone %>
              </p>
            </label>
          </div>
        </div>
      </div>
    </div>
    <% }); %>
  </div>
  <% } else { %>
  <!-- <div class="text-center py-4">
    <p class="mb-3">No addresses available</p>
    <a href="/checkoutAddress" class="btn btn-primary">Add Your First Address</a>
  </div> -->
  <% } %>
</div>

          <!-- Hidden select for form compatibility -->
          <select
            id="existingAddress"
            style="
              position: absolute;
              visibility: hidden;
              opacity: 0;
              pointer-events: none;
            "
          >
            <option selected>Select an address</option>
            <% if (userAddress && userAddress.address.length > 0) { %> <%
            userAddress.address.forEach((address) => { %>
            <option value="<%= address._id %>">
              <%= address.addressType %>
            </option>
            <% }); %> <% } %>
          </select>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="col-lg-4">
        <div class="order-summary">
          <h2 class="h4 mb-4">Your Order</h2>
          <div class="border-bottom pb-3 mb-3">
            <div class="d-flex justify-content-between mb-2">
              <span class="font-weight-bold">Products</span>
              <span class="font-weight-bold">Subtotal</span>
            </div>
            <% if (cartItems && cartItems.length > 0) { %> <% let subtotal = 0;
            %> <% cartItems.forEach(function(item) { %> <% subtotal +=
            item.totalPrice; %>
            <div class="d-flex justify-content-between mb-2">
              <div class="d-flex align-items-center">
                <a
                  style="all: unset; display: contents"
                  href="/details?id=<%=item.product._id%>"
                >
                  <img
                    src="/uploads/reImage/<%= item.product.productImage[0] %>"
                    alt="<%= item.product.productName %>"
                  />
                  <div class="ml-2">
                    <p class="product-name mb-0">
                      <%= item.product.productName.split('|')[0].trim() %> (x<%=
                      item.quantity %>)
                    </p>
                    <p class="product-mn mb-0">
                      <%= item.product.category.name %>
                    </p>
                  </div>
                </a>
              </div>
              <span style="color: black;" class="product-price"
                >₹ <%= item.totalPrice.toFixed(2) %></span
              >
            </div>
            <% }); %> <% } else { %>
            <tr>
              <td colspan="5" class="text-center">
                <p class="lead mb-4">No item found in Cart</p>
              </td>
            </tr>
            <% } %>
          </div>

          <div class="border-bottom pb-3 mb-3">
            <div class="coupon-section mb-4">
              <h3 class="h5 mb-3">Apply Coupon</h3>
              <div class="input-group">
                <input
                  type="text"
                  id="couponCode"
                  class="form-control"
                  placeholder="Enter coupon code"
                />
                <button class="btn btn-primary" onclick="applyCoupon()">
                  Apply
                </button>
              </div>
              <p id="couponMessage" class="mt-2" style="display: none"></p>
              <a href="#" class="text-black fw-bold text-decoration-none" data-bs-toggle="modal" data-bs-target="#couponModal">
  View Coupons
</a>

              
              
            </div>

            <div id="appliedCoupon" style="display: none">
              <p>Applied Coupon: <span id="appliedCouponName" class="text-success"></span></p>
              <button class="btn btn-sm btn-danger" onclick="removeCoupon()">
                Remove
              </button>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal</span>
              <span
                >₹ <span id="subtotal"><%= subtotal.toFixed(2) %></span></span
              >
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Coupon Discount</span>
              <span>(-) ₹ <span id="couponDiscount">0.00</span></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping</span>
              <%if(subtotal<15000){%>
              <span>₹ 500.00</span>
              <%}else{%>
              <span class="text-success">Free Shipping</span>
              <%}%>
            </div>
            <div class="text-right text-primary mb-2">
              <a href="#" class="text-black fw-bold text-decoration-none" onclick="showShippingCharge(); return false;">
  View shipping charge
</a>

            </div>
            <div class="d-flex justify-content-between font-weight-bold">
              <span>Total</span>

              <span style="color: black;" class="total-price"
                >₹
                <span   id="grandTotal"
                  ><%= subtotal >= 15000?subtotal.toFixed(2):(subtotal+500).toFixed(2) %></span>
            </div>
          </div>
          <div class="mb-4">
            <h3 class="h5 mb-3">Payment Method</h3>
<div class="mb-3">
  <div class="form-check">
    <input class="form-check-input" type="radio" name="payment" id="paymentOnline" value="online payment" />
    <label class="form-check-label" for="paymentOnline">
      <img src="https://upload.wikimedia.org/wikipedia/commons/8/89/Razorpay_logo.svg" alt="Razorpay" style="height: 24px; background-color: white; padding: 4px; border-radius: 4px;">
      <span class="ms-2">Online Payment</span>
    </label>
  </div>
</div>

<div class="mb-3">
  <div class="form-check">
    <input class="form-check-input" type="radio" name="payment" id="paymentWallet" value="wallet" />
    <label class="form-check-label" for="paymentWallet">
      <span class="ms-2">Wallet Payment (Balance: ₹<%= wallet.balance.toFixed(2) %>)</span>
    </label>
  </div>
</div>

<div class="mb-3">
  <div class="form-check">
    <input class="form-check-input" type="radio" name="payment" id="paymentCOD" value="cod" />
    <label class="form-check-label" for="paymentCOD">
      <span class="ms-2">Cash on Delivery</span>
    </label>
  </div>
</div>

          </div>
          <button class="btn place-order-btn btn-block">Place Order</button>
        </div>
      </div>
    </div>
  </div>

 

<!-- Coupon Modal -->
<div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="couponModalLabel">Select a Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body ">
        <div class="coupon-cards">
          <% if (coupons && coupons.length > 0) { %>
            <div class="row">
              <% coupons.forEach((coupon) => { %>
                <div class="col-12 mb-3"> 
                  <div class="card h-100 shadow-sm border-primary w-100">
                    <div class="card-body d-flex align-items-center">
                      <input
                        class="form-check-input me-3"
                        type="radio"
                        name="selectedCoupon"
                        id="coupon_<%= coupon._id %>"
                        value="<%= coupon._id %>"
                        <% if(coupon.minimumPrice > subtotal) { %>
                          disabled
                        <% } %>
                      />
                      <label class="form-check-label w-100" for="coupon_<%= coupon._id %>">
                        <h6 class="text-primary fw-bold mb-1"><%= coupon.name %></h6>
                        <p class="text-muted mb-1 small">
                          <% if (coupon.offerPrice) { %>
                            <span class="text-success"> <strong><%= coupon.offerPrice %> Off</strong></span> On Orders Above <%= coupon.minimumPrice %>
                          <% } else if (coupon.discountPercentage) { %>
                            <span class="text-success"> <strong><%= coupon.discountPercentage %>% Off</strong></span> On Orders Above <%= coupon.minimumPrice %>
                          <% } %>
                          <br>Expires on <span class="text-warning"><%= new Date(coupon.expireOn).toDateString() %></span>
                          
                          <% if (coupon.minimumPrice > subtotal) { %>
                            <br><span>Add Items worth <strong class="text-danger"><%= coupon.minimumPrice - subtotal %></strong> to avail this Offer</span>
                          <% } %>

                          <% if (coupon.discountPercentage && coupon.maxDiscountAmount) { %>
                            <br><span >Max Discount: <strong class="text-danger"><%= coupon.maxDiscountAmount %></strong></span>
                          <% } %>
                        </p>
                      </label>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <div class="text-center py-4">
              <p class="mb-3">No coupons available</p>
            </div>
          <% } %>
        </div>
        
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary mt-2" onclick="clearCouponSelection()">Clear Selection</button>

        <button type="button" class="btn btn-primary" id="applyCouponBtn">Proceed</button>
      </div>
    </div>
  </div>
</div>

  <!-- Wallet Payment Modal -->
  <div
    class="modal fade"
    id="walletPaymentModal"
    tabindex="-1"
    aria-labelledby="walletPaymentModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="walletPaymentModalLabel">
            Wallet Payment
          </h5>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <h6>
              Available Balance: ₹<span id="walletBalance"
                ><%= wallet.balance.toFixed(2) %></span
              >
            </h6>
            <h6>Payable Amount: ₹<span id="payableAmount"></span></h6>
          </div>
          <div id="insufficientFunds" style="display: none">
            <div class="alert alert-warning">
              Insufficient funds in wallet. Please add money to continue.
            </div>
            <a href="/wallet#add-money-button" class="btn btn-primary"
              >Add Money</a
            >
          </div>
        </div>
        <div class="modal-footer">
          <button
            type="button"
            class="btn btn-secondary"
            data-bs-dismiss="modal"
          >
            Close
          </button>

          <button
            type="button"
            class="btn btn-primary"
            id="confirmWalletPayment"
          >
            Pay Now
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-Gn5384xqQ1aoWXA+058RXPXfg6Nv6JCzF5ZC8EG5fAwIQ9k/rwZV+YFf5Xq5drFQ" crossorigin="anonymous"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
    function clearCouponSelection() {
    const selectedRadio = document.querySelector('input[name="selectedCoupon"]:checked');
    if (selectedRadio) {
        selectedRadio.checked = false;
    }
}
document.getElementById("applyCouponBtn").addEventListener("click", function () {
    const selectedCoupon = document.querySelector('input[name="selectedCoupon"]:checked');
    const couponModal = document.getElementById("couponModal");
    const modalInstance = bootstrap.Modal.getInstance(couponModal);

    if (selectedCoupon) {
        const couponLabel = document.querySelector(`label[for="${selectedCoupon.id}"] h6`).textContent;
        document.getElementById("couponCode").value = couponLabel;
    }

    if (modalInstance) {
        modalInstance.hide();
    }

    setTimeout(() => {
    document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
    document.body.classList.remove("modal-open");
    document.body.style.overflow = "";
}, 200);
});





    let appliedCoupon = null;

    function applyCoupon() {
       const couponCode = document.getElementById('couponCode').value;
       const subtotal = parseFloat(document.getElementById('subtotal').textContent);

       fetch('/applyCoupon', {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json',
           },
           body: JSON.stringify({ couponCode, subtotal }),
       })
       .then(response => response.json())
       .then(data => {
           const messageElement = document.getElementById('couponMessage');
           if (data.success) {
               appliedCoupon = data.coupon;
               updateOrderSummary();
               messageElement.textContent = 'Coupon applied successfully!';
               messageElement.style.color = 'green';
               document.getElementById('appliedCoupon').style.display = 'block';
               document.getElementById('appliedCouponName').textContent = data.coupon.name;
               document.querySelector('.coupon-section').style.display = 'none';
               Swal.fire('success', `coupon ${data.coupon.name} applied successfully`, 'success');
           } else {
               messageElement.textContent = data.message;
               messageElement.style.color = 'red';
           }
           messageElement.style.display = 'block';
       })
       .catch(error => {
           console.error('Error:', error);
           Swal.fire('Error', 'An error occurred while applying the coupon', 'error');
       });
    }

    function removeCoupon() {
    fetch('/removeCoupon', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            appliedCoupon = null;
            updateOrderSummary();
            document.getElementById('appliedCoupon').style.display = 'none';
            document.querySelector('.coupon-section').style.display = 'block';
            document.getElementById('couponMessage').style.display = 'none';
            document.getElementById('couponCode').value = '';
            Swal.Fire('waring',"Coupon removed",'warning');
        } else {
          Swal.Fire('error',"Failed to remove coupon",'error');
        }
    })
    .catch(error => {
      Swal.Fire('error',"error occured while removing coupon",'error');
    });
}


function updateOrderSummary() {
    const subtotalElement = document.getElementById('subtotal');
    const couponDiscountElement = document.getElementById('couponDiscount');
    const grandTotalElement = document.getElementById('grandTotal');

    const subtotal = parseFloat(subtotalElement.textContent);
    let discount = 0;

    if (appliedCoupon) {

        if (appliedCoupon.discountPercentage) {

            discount = (subtotal * appliedCoupon.discountPercentage) / 100;

            if (appliedCoupon.maxDiscountAmount && discount > appliedCoupon.maxDiscountAmount) {
                discount = appliedCoupon.maxDiscountAmount;
            }
        } else {

            discount = appliedCoupon.offerPrice;
        }
    }

    let grandTotal;

    if (subtotal < 15000) {
        grandTotal = subtotal - discount + 500;
    } else {
        grandTotal = subtotal - discount;
    }

    couponDiscountElement.textContent = discount.toFixed(2);
    grandTotalElement.textContent = grandTotal.toFixed(2);
}

    async function placeOrder() {
       try {
          
           const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
           const paymentMethod = document.querySelector('input[name="payment"]:checked');

           if (!selectedAddress || selectedAddress.value === 'Select an address') {
               Swal.fire('Error', 'Please select a shipping address', 'error');
               return;
           }

           if (!paymentMethod) {
               Swal.fire('Error', 'Please select a payment method', 'error');
               return;
           }

           proceedWithOrder();
       } catch (error) {
           console.error('Error:', error);
           Swal.fire('Error', error.message || 'An error occurred while placing the order1', 'error');
       }
    }

    function proceedWithOrder() {
      const couponCode = document.getElementById('couponCode').value;
       const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
       const paymentMethod = document.querySelector('input[name="payment"]:checked');

       const orderData = {
           addressId: selectedAddress.value,
           paymentMethod: paymentMethod.value,
           couponCode: couponCode ? couponCode : null
       };

       switch (paymentMethod.value) {
           case 'cod':
               processCODOrder(orderData);
               break;
           case 'online payment':

               processRazorpayOrder(orderData);
               break;
           case 'wallet':
               processWalletOrder(orderData);
               break;
       }
    }


    function processCODOrder(orderData) {
       fetch('/placeOrder', {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json',
           },
           body: JSON.stringify(orderData)
       })
       .then(response => response.json())
       .then(data => {
           
           if (data.success) {
               Swal.fire({
                   title: 'Order Placed Successfully!',
                   icon: 'success',
                   showConfirmButton:false,
                   timer:1500
               }).then((result) => {
                       window.location.href = '/confirmation';
               });
           } else {
               Swal.fire('Error', data.message || 'An error occurred while placing the order', 'error');
           }
       })
       .catch(error => {
           console.error('Error:', error);
           Swal.fire('Error', 'An error occurred while placing the order', 'error');
       });
    }

       function showShippingCharge() {
           Swal.fire({
               title: 'Shipping Charge',
               text: 'Shipping charge is ₹ 500.00 For All Orders below ₹15,000. ',
               icon: 'info',
               confirmButtonText: 'OK'
           });
       }


    function processWalletOrder(orderData) {

       const walletBalance = parseFloat(document.getElementById('walletBalance').textContent);
       const payableAmount = parseFloat(document.getElementById('grandTotal').textContent);

       document.getElementById('payableAmount').textContent = payableAmount.toFixed(2);

       const walletPaymentModal = new bootstrap.Modal(document.getElementById('walletPaymentModal'));
       const insufficientFunds = document.getElementById('insufficientFunds');
       const confirmWalletPayment = document.getElementById('confirmWalletPayment');

    

       if (walletBalance < payableAmount) {
           insufficientFunds.style.display = 'block';
           confirmWalletPayment.style.display = 'none';
       } else {
           insufficientFunds.style.display = 'none';
           confirmWalletPayment.style.display = 'block';
       }

       walletPaymentModal.show();
    }

    function placeWalletOrder(orderData) {
       fetch('/placeWalletOrder', {
           method: 'POST',
           headers: {
               'Content-Type': 'application/json',
           },
           body: JSON.stringify(orderData)
       })
       .then(response => response.json())
       .then(data => {
           if (data.success) {
               Swal.fire({
                   title: 'Order Placed Successfully!',
                   icon: 'success',
                   timer:2000,
                   timerProgressBar:true

               }).then((result) => {
                       window.location.href = '/confirmation';
               });
           } else {
               Swal.fire('Error', data.message || 'Failed to place order', 'error');
           }
       })
       .catch(error => {
           console.error('Error:', error);
           Swal.fire('Error', 'An error occurred while placing the order', 'error');
       });
    }

    async function processRazorpayOrder(orderData) {
  const response = await fetch('/order/createOrder', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      orderData,
      addressId: orderData.addressId,
      paymentMethod: orderData.paymentMethod,
      couponCode: orderData.couponCode,
    }),
  });

  const order = await response.json();
  if (!response.ok || order.success === false) {
      Swal.fire({
        icon: "error",
        title: "Order Creation Failed",
        text: order.message || "Something went wrong while creating your order. Please try again.",
      });
      return;
    }
  const options = {
    key: "<%= process.env.RAZORPAY_KEY_ID %>",
    amount: order.amount,
    currency: "INR",
    name: "Women Fashion",
    description: "Order Payment",
    order_id: order.id,
    handler: async function (response) {
      // Payment successful
      const verifyRes = await fetch("/order/verifyPayment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          razorpay_order_id: response.razorpay_order_id,
          razorpay_payment_id: response.razorpay_payment_id,
          razorpay_signature: response.razorpay_signature,
          amount: order.amount,
        }),
      });

      const result = await verifyRes.json();
      if (result.success) {
        Swal.fire({
          title: "Success!",
          text: "Payment Successful!",
          icon: "success",
          timer: 1500,
          timerProgressBar: true,
        }).then(() => {
          window.location.href = "/confirmation";
        });
      } else {
        window.location.href = `/paymentFailure?orderId=${order.orderId}`;
      }
    },
    prefill: {
      email: "<%= user.email %>",
      contact: "<%= user.phone %>",
    },
    theme: { color: "#3399cc" },
    modal: {
      ondismiss: function () {
        // User closed modal without paying
        window.location.href = `/paymentFailure?orderId=${order.id}`;
      },
    },
  };

  const paymentObject = new Razorpay(options);

  // Handle failed payments
  paymentObject.on("payment.failed", async function (response) {
    // Update order status to failed
    await fetch("/order/verifyPayment", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        razorpay_order_id: response.error.metadata.order_id,
        razorpay_payment_id: response.error.metadata.payment_id,
        razorpay_signature: "", // No signature in case of failure
        amount: order.amount,
      }),
    });
    
    window.location.href = `/paymentFailure?orderId=${order.id}`;
  });

  paymentObject.open();
}

    document.getElementById('confirmWalletPayment').addEventListener('click', async () => {
       const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
       if (!selectedAddress || selectedAddress.value === 'Select an address') {
           alert('Please select a shipping address');
           return;
       }

       const orderData = {
           addressId: selectedAddress.value,
           paymentMethod: 'wallet',
           couponCode: appliedCoupon ? appliedCoupon.name : null
       };

       try {
           const response = await fetch('/placeWalletOrder', {
               method: 'POST',
               headers: {
                   'Content-Type': 'application/json'
               },
               body: JSON.stringify(orderData)
           });

           const data = await response.json();
           if (data.success) {
               Swal.fire({
                   title: 'Order Placed Successfully!',
                   icon: 'success',
                   timer:2000
               }).then((result) => {

                       window.location.href = '/confirmation';
               });
           } else {
               Swal.fire('Error', data.message || 'Failed to place order', 'error');
           }
       } catch (error) {
           console.error('Error:', error);
           Swal.fire('Error', 'An error occurred while placing the order', 'error');
       }
    });

       
       document.querySelector('.place-order-btn').onclick = placeOrder;
  </script>
  <script>
    // Update the hidden select when a card is selected
    document
      .querySelectorAll('input[name="selectedAddress"]')
      .forEach((radio) => {
        radio.addEventListener("change", function () {
          // Update the hidden select
          document.getElementById("existingAddress").value = this.value;

          // Update card styling
          document.querySelectorAll(".address-cards .card").forEach((card) => {
            card.classList.remove("selected");
          });
          this.closest(".card").classList.add("selected");
        });
      });
  </script>

  <script>
    // JavaScript to handle the "Add New Address" button click
    document
      .getElementById("addNewAddressBtn")
      .addEventListener("click", function () {
        document.getElementById("newAddressForm").style.display = "block";
      });
  </script>


<%- include("../../views/partials/user/footer") %>

  
</body>