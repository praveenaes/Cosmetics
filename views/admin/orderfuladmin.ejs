<%- include('../partials/admin/header') %> 
<section>
    <style>
        .custom-select {
            background-color: #fff;
            color: #333;
            padding: 8px;
            border-radius: 8px;
            transition: all 0.3s ease-in-out;
        }
        
        .custom-select:focus {
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            border-color: #007bff;
        }
    
        .form-control {
            border-radius: 8px;
        }
    
        .btn {
            border-radius: 8px;
        }
    
        .form-control:focus, .custom-select:focus {
            outline: none;
        }
    
        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    </style>
   
   <div class="container-fluid mt-4">
    <div class="card">

        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>Order List</h2>
        </div>
        
        <form method="GET" action="/admin/order" class="m-4 p-3 bg-light rounded shadow-sm">
            <div class="row g-2 align-items-center">
                
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" name="search" class="form-control border-primary" placeholder="Search by Order ID " value="<%= search %>">
                        <button type="submit" name="action" value="search" class="btn btn-primary">Search</button>
                    </div>
                </div>
        
               
                <div class="col-md-3">
                    <select name="status" class="form-select border-primary custom-select">
                        <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                        <option value="returned" <%= status === 'Returned' ? 'selected' : '' %>>Returned</option>
                        <option value="Processing" <%= status === 'Processing' ? 'selected' : '' %>>Processing</option>
                        <option value="Shipped" <%= status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                    </select>
                </div>
        
              
                <div class="col-md-2">
                    <select name="sortField" class="form-select border-primary custom-select">
                        <option value="createdAt" <%= sortField === 'createdAt' ? 'selected' : '' %>>Date</option>
                        <option value="finalAmount" <%= sortField === 'finalAmount' ? 'selected' : '' %>>Price</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select name="sortOrder" class="form-select border-primary custom-select">
                        <option value="desc" <%= sortOrder === -1 ? 'selected' : '' %>>Descending</option>
                        <option value="asc" <%= sortOrder === 1 ? 'selected' : '' %>>Ascending</option>
                    </select>
                </div>
        
               
                <div class="col-md-1 d-grid">
                    <button type="submit" class="btn btn-success">Filter</button>
                </div>
                <div class="col-md-1 d-grid mt-3">
                    <button type="button" class="btn btn-secondary" onclick="clearFilters()">Clear</button>
                </div>
            </div>
        </form>
        
        <script>
            function clearFilters() {
                window.location.href = "/admin/order";
            }
        </script>
        
        

        <div class="card-body">
            <div class="table-responsive">
        <table class="table  table-hover text-center mt-5"
            style="table-layout: fixed; width: 100%; ; font-size: 14px;">
            <thead style="background-color:#DAADCC; color: white;">
                <tr>
                   
                    <th style="width: 150px;" scope="col" class="text-center">OrderId</th>
                    <th style="width: 50px;" scope="col" class="text-center">Date</th>
                    <th style="width: 100px;" scope="col" class="text-center">Customer</th>
                    <th style="width: 50px;" scope="col" class="text-center">Amount</th>
                    <th style="width: 80px;" scope="col" class="text-center">Status</th>
                    <th style="width: 150px;" scope="col" class="text-center">Actions</th>
                   
                </tr>
            </thead>
            <tbody>
                <% orders.forEach(order => { %>
                    <tr class="align-middle">
                        <td><%= order.orderId %></td>
                        <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                        <td>
                            <div>
                                <strong><%= order.userId.name %></strong>
                            </div>
                        </td>
                        <td>â‚¹<%= Math.round(order.totalPrice) %></td>
                        <td>
                            <div>
                                <span class="status-badge d-inline-block px-2 py-1 rounded <%= 
                                    order.status === 'delivered' ? 'bg-success text-white' :
                                    order.status === 'cancelled' ? 'bg-danger text-white' :
                                    order.status === 'shipped' ? 'bg-info text-white' :
                                    order.status === 'return_requested' ? 'bg-warning text-dark' :
                                    order.status === 'returning' ? 'bg-info text-white' :
                                    order.status === 'returned' ? 'bg-secondary text-white' :
                                    'bg-warning text-dark'
                                %>">
                                    <%= order.status.toUpperCase() %>
                                </span>
                            </div>
                        </td>
                        <td class="text-center ">
                            <a href="/admin/adminOrders?id=<%=order._id%>" class="btn btn-primary btn-sm" style="min-width:30px ; margin-right: 5px;border-radius: 25px;font-size: 12px;font-weight: bold;">
                                View Details
                            </a>
                            
                            <% if (order.status === 'return requested' && order.requestStatus === 'pending') { %>
                                <div class="btn-group mt-2">
                                    <button onclick="handleReturn('approved', '<%= order._id %>')" 
                                            class="btn btn-success btn-sm" style="min-width:30px ; margin-right: 5px;border-radius: 25px;font-size: 12px;font-weight: bold;">
                                        Approve Return
                                    </button>
                                    <button onclick="handleReturn('rejected', '<%= order._id %>')" 
                                            class="btn btn-danger btn-sm"style="min-width:30px ; margin-right: 5px;border-radius: 25px;font-size: 12px;font-weight: bold;">
                                        Reject
                                    </button>
                                </div>
                            <% } else if ( order.requestStatus === 'approved' && order.status != 'returned' ) { %>
                                <button onclick="updateReturnStatus('<%= order._id %>')" 
                                        class="btn btn-info btn-sm mt-2"style="min-width:30px ; margin-right: 5px;border-radius: 25px;font-size: 12px;font-weight: bold;">
                                    Update Return Status
                                </button>
                            <% } else if (!['cancelled', 'delivered', 'returned', 'return requested', 'returning'].includes(order.status)) { %>
                                <div class="mt-2">
                                    <button onclick="updateStatus('<%= order._id %>')" 
                                            class="btn btn-info btn-sm">
                                        Update Status
                                    </button>
                                    <button onclick="cancelOrder('<%= order._id %>')" 
                                            class="btn btn-danger btn-sm">
                                        Cancel
                                    </button>
                                </div>
                            <% } %>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
        </div>
    </div>
</div>
        <!-- Pagination -->
        <div class="pagination">
            <% if (currentPage> 1) { %>
                <a href="/admin/order?page=<%= currentPage - 1 %>">
                    <i class="fa-solid fa-backward"></i>
                </a>
                <% } %>

                    <% for (let i=1; i <=totalPages; i++) { %>
                        <a href="/admin/order?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>">
                            <%= i %>
                        </a>
                        <% } %>

                            <% if (currentPage < totalPages) { %>
                                <a href="/admin/order?page=<%= currentPage + 1 %>">
                                    <i class="fa-solid fa-forward"></i>
                                </a>
                                <% } %>
        </div>
    </div>


</section>

<style>
    .pagination {
        margin-top: 20px;
        justify-content: center;
        align-items: center;
    }

    .pagination a {
        padding: 10px;
        margin: 4px;
        text-decoration: none;
        background-color: white;
        color: black;
        font-weight: bold;
        border-radius: 50%;
        align-items: center;
    }

    .pagination a i {
        padding: 4px;
    }

    .pagination a.active {
        background-color: #DAADCC;
        font-weight: bold;
    }
</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Rejection Category</label>
                    <select class="form-select" id="rejectionCategory" required>
                        <option value="">Select a category</option>
                        <option value="Invalid reason">Invalid reason</option>
                        <option value="Outside return window">Outside return window</option>
                        <option value="Product condition">Product condition</option>
                        <option value="Policy violation">Policy violation</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Detailed Explanation</label>
                    <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let currentOrderId = null;

async function updateStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'confirmed': 'Confirmed',
            'shipped': 'Shipped',
            'delivered': 'delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/updateStatus', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}

async function cancelOrder(orderId) {
    const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/admin/orderCancel', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Order cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to cancel order'
            });
        }
    }
}

async function handleReturn(action, orderId) {
    currentOrderId = orderId;
    
    if (action === 'rejected') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
    }

    if (action === 'approved') {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to approve this return request!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/handleReturn', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            action: action
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire(
                            'Approved!',
                            'Return request has been approved.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'Failed to approve return request',
                        'error'
                    );
                }
            }
        });
    }
}

async function submitRejection() {
    const category = document.getElementById('rejectionCategory').value;
    const reason = document.getElementById('rejectionReason').value;
    
    if (!category || !reason) {
        alert('Please select a category and provide a detailed explanation');
        return;
    }

    try {
        const response = await fetch('/admin/handleReturn', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: currentOrderId,
                action: 'rejected',
                category: category,
                message: reason
            })
        });

        const data = await response.json();
        
        if (data.success) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
            modal.hide();
            Swal.fire(
                'Rejected!',
                'Return request has been rejected.',
                'success'
            ).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire(
            'Error!',
            error.message || 'Failed to reject return request',
            'error'
        );
    }
}

async function updateReturnStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
            'returning': 'returning',
            'returned': 'Returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/updateReturnStatus', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}
</script>

<%- include('../partials/admin/footer') %>